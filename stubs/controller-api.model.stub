<?php

namespace {{ namespace }};

use {{ namespacedAction }};
use {{ namespacedRequest }};
use {{ namespacedModel }};
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Spatie\QueryBuilder\QueryBuilder;

class {{ model }}Controller extends Controller
{
    /**
     * Uses the {{ model }} model to check permissions against
     *
     * @var class-string
     */
    protected string $model = {{ model }}::class;

    /**
     * Display a listing of the resource.
     */
    public function index(Request $request): JsonResponse
    {
        $model = QueryBuilder::for({{ model }}::class)
            ->allowedSorts(['id', 'created_at']);

        return response()->json($model->paginate(perPage: $request->perPage()));

    }

    /**
     * Store a newly created resource in storage.
     *
     * @param {{ request }} $request
     * @param {{ action }} ${{ actionVariableName }}
     *
     * @return JsonResponse
     */
    public function store({{ request }} $request, {{ action }} ${{ actionVariableName }}): JsonResponse
    {
        ${{ modelVariableName }} = ${{ actionVariableName }}->run(
            model: new {{ model }},
            request: $request
        );

        return response()->json(${{ modelVariableName }});

    }

    /**
     * Display the specified resource.
     */
    public function show({{ model }} ${{ modelVariableName }}): JsonResponse
    {
        return response()->json(${{ modelVariableName }});
    }

    /**
     * Update the specified resource in storage.
     *
     * @param {{ request }} $request
     * @param {{ model }} ${{ modelVariableName }}
     * @param {{ action }} ${{ actionVariableName }}
     *
     * @return JsonResponse
     */
    public function update({{ request }} $request, {{ model }} ${{ modelVariableName }}, {{ action }} ${{ actionVariableName }}):JsonResponse
    {
        ${{ modelVariableName }} = ${{ actionVariableName }}->run(
            model: ${{ modelVariableName }},
            request: $request
        );

        return response()->json(${{ modelVariableName }});
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param {{ model }} ${{ modelVariableName }}
     *
     * @return JsonResponse
     */
    public function destroy({{ model }} ${{ modelVariableName }}):JsonResponse
    {
        ${{ modelVariableName }}->delete();

        return response()->json('Item deleted');
    }
}
